{"ast":null,"code":"var _jsxFileName = \"/Users/kylemac/Desktop/classwork/properChannels/client/src/components/CenterBody/centerBody.js\";\nimport React from \"react\";\nimport \"./centerBody.css\";\n\nvar CenterBody = function CenterBody(props) {\n  return React.createElement(\"div\", {\n    className: \"centerBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4\n    },\n    __self: this\n  }, props.children);\n}; // const React = require('react')\n\n\nvar ReactDOM = require('react-dom');\n\nvar request = require('axios');\n\nvar url = 'http://localhost:3000/messages';\nvar fD = ReactDOM.findDOMNode; // class MessageList extends React.Component {\n//   render() {\n//     var messages = this.props.messages\n//     if (!messages || !messages.length>0) return (\n//         <p>No messages yet</p>\n//     )\n//     return (\n//       <table className=\"table\">\n//         <caption>Messages</caption>\n//         <thead>\n//           <tr>\n//             <th className=\"span2\">Name</th>\n//             <th className=\"span10\">Message</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {messages.map(function(message){\n//             const d = new Date(message.created)\n//             return (\n//               <tr key={message._id}>\n//                 <td className=\"span2\">{message.name}<br />{d.toUTCString()}</td>\n//                 <td className=\"span10\"><h3>{message.category}</h3><h3>{message.title}</h3>{message.message}</td>\n//               </tr>\n//             )\n//           })}\n//         </tbody>\n//       </table>\n//     )\n//   }\n// }\n// class NewMessage extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.addMessage = this.addMessage.bind(this)\n//     this.keyup = this.keyup.bind(this)\n//   }\n//   addMessage() {\n//     let name = fD(this.refs.name).value.trim()\n//     let category = fD(this.refs.category).value.trim()\n//     let title = fD(this.refs.title).value.trim()\n//     let message = fD(this.refs.message).value.trim()\n//     if (!name || !message) {\n//       return console.error('Name and message cannot be empty')\n//     }\n//     this.props.addMessageCb({\n//       name: name,\n//       category: category,\n//       title: title,\n//       message: message\n//     })\n//     fD(this.refs.name).value = ''\n//     fD(this.refs.category).value = ''\n//     fD(this.refs.title).value = ''\n//     fD(this.refs.message).value = ''\n//   }\n//   keyup(e) {\n//     if (e.keyCode == 13) return this.addMessage()\n//   }\n//   render() {\n//     return (\n//       <div className=\"row-fluid\" id=\"new-message\">\n//         <div className=\"span12\">\n//           <form className=\"well form-inline\" onKeyUp={this.keyup} onSubmit={this.addMessage}>\n//             <input\n//               type=\"text\" name=\"username\"\n//               className=\"input-small\" placeholder=\"Ваше имя\" ref=\"name\"/><br />\n//             <input\n//               type=\"text\" name=\"category\" className=\"input-small\"\n//               placeholder=\"категория\" ref=\"category\" /><br />\n//             <input\n//               type=\"text\" name=\"title\" className=\"input-small\"\n//               placeholder=\"тема\" ref=\"title\" /><br />\n//             <input\n//               type=\"textarea\" name=\"message\" className=\"\" rows=\"7\"\n//               placeholder=\"текст сообщения\" ref=\"message\" /><br />\n//             <a id=\"send\" className=\"btn btn-primary\"\n//               onClick={this.addMessage}>ОПУБЛИКОВАТЬ</a>\n//           </form>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n// class MessageBoard extends React.Component {\n//   constructor(ops) {\n//     super(ops)\n//     this.addMessage = this.addMessage.bind(this)\n//     if (this.props.messages)\n//       this.state = {messages: this.props.messages}\n//   }\n//   componentDidMount() {\n//     request.get(url)\n//       .then(response => response.data)\n//       .then(messages => {\n//         console.log(messages)\n//         if(!messages || !messages.length){\n//           return;\n//         }\n//         console.log(messages)\n//         this.setState({messages: messages})\n//       })\n//   }\n//   addMessage(message) {\n//     let messages = this.state.messages\n//     request.post(url, message)\n//       .then(result => result.data)\n//       .then((data) =>{\n//         if(!data){\n//           return console.error('Failed to save')\n//         }\n//         console.log('Saved!')\n//         messages.unshift(data)\n//         this.setState({messages: messages})\n//     })\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <NewMessage messages={this.state.messages} addMessageCb={this.addMessage} />\n//         <MessageList messages={this.state.messages} />\n//       </div>\n//     )\n//   }\n// }\n\nmodule.exports = MessageBoard;\nexport default CenterBody;","map":{"version":3,"sources":["/Users/kylemac/Desktop/classwork/properChannels/client/src/components/CenterBody/centerBody.js"],"names":["React","CenterBody","props","children","ReactDOM","require","request","url","fD","findDOMNode","module","exports","MessageBoard"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK;AAAA,SAAI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BA,KAAK,CAACC,QAAnC,CAAJ;AAAA,CAAxB,C,CAEA;;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,OAAD,CAAvB;;AAEA,IAAME,GAAG,GAAG,gCAAZ;AACA,IAAMC,EAAE,GAAGJ,QAAQ,CAACK,WAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AACA,eAAeX,UAAf","sourcesContent":["import React from \"react\";\nimport \"./centerBody.css\"\n\nconst CenterBody = props => <div className=\"centerBody\">{props.children}</div>\n\n// const React = require('react')\nconst ReactDOM = require('react-dom')\nconst request = require('axios')\n\nconst url = 'http://localhost:3000/messages'\nconst fD = ReactDOM.findDOMNode\n\n// class MessageList extends React.Component {\n//   render() {\n//     var messages = this.props.messages\n//     if (!messages || !messages.length>0) return (\n//         <p>No messages yet</p>\n//     )\n//     return (\n//       <table className=\"table\">\n//         <caption>Messages</caption>\n//         <thead>\n//           <tr>\n//             <th className=\"span2\">Name</th>\n//             <th className=\"span10\">Message</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {messages.map(function(message){\n//             const d = new Date(message.created)\n//             return (\n//               <tr key={message._id}>\n//                 <td className=\"span2\">{message.name}<br />{d.toUTCString()}</td>\n//                 <td className=\"span10\"><h3>{message.category}</h3><h3>{message.title}</h3>{message.message}</td>\n//               </tr>\n//             )\n//           })}\n//         </tbody>\n//       </table>\n//     )\n//   }\n// }\n\n// class NewMessage extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.addMessage = this.addMessage.bind(this)\n//     this.keyup = this.keyup.bind(this)\n//   }\n//   addMessage() {\n//     let name = fD(this.refs.name).value.trim()\n//     let category = fD(this.refs.category).value.trim()\n//     let title = fD(this.refs.title).value.trim()\n//     let message = fD(this.refs.message).value.trim()\n//     if (!name || !message) {\n//       return console.error('Name and message cannot be empty')\n//     }\n//     this.props.addMessageCb({\n//       name: name,\n//       category: category,\n//       title: title,\n//       message: message\n//     })\n//     fD(this.refs.name).value = ''\n//     fD(this.refs.category).value = ''\n//     fD(this.refs.title).value = ''\n//     fD(this.refs.message).value = ''\n//   }\n//   keyup(e) {\n//     if (e.keyCode == 13) return this.addMessage()\n//   }\n//   render() {\n//     return (\n//       <div className=\"row-fluid\" id=\"new-message\">\n//         <div className=\"span12\">\n//           <form className=\"well form-inline\" onKeyUp={this.keyup} onSubmit={this.addMessage}>\n//             <input\n//               type=\"text\" name=\"username\"\n//               className=\"input-small\" placeholder=\"Ваше имя\" ref=\"name\"/><br />\n//             <input\n//               type=\"text\" name=\"category\" className=\"input-small\"\n//               placeholder=\"категория\" ref=\"category\" /><br />\n//             <input\n//               type=\"text\" name=\"title\" className=\"input-small\"\n//               placeholder=\"тема\" ref=\"title\" /><br />\n//             <input\n//               type=\"textarea\" name=\"message\" className=\"\" rows=\"7\"\n//               placeholder=\"текст сообщения\" ref=\"message\" /><br />\n//             <a id=\"send\" className=\"btn btn-primary\"\n//               onClick={this.addMessage}>ОПУБЛИКОВАТЬ</a>\n//           </form>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n\n// class MessageBoard extends React.Component {\n//   constructor(ops) {\n//     super(ops)\n//     this.addMessage = this.addMessage.bind(this)\n//     if (this.props.messages)\n//       this.state = {messages: this.props.messages}\n//   }\n//   componentDidMount() {\n//     request.get(url)\n//       .then(response => response.data)\n//       .then(messages => {\n//         console.log(messages)\n//         if(!messages || !messages.length){\n//           return;\n//         }\n//         console.log(messages)\n//         this.setState({messages: messages})\n//       })\n//   }\n//   addMessage(message) {\n//     let messages = this.state.messages\n//     request.post(url, message)\n//       .then(result => result.data)\n//       .then((data) =>{\n//         if(!data){\n//           return console.error('Failed to save')\n//         }\n//         console.log('Saved!')\n//         messages.unshift(data)\n//         this.setState({messages: messages})\n//     })\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <NewMessage messages={this.state.messages} addMessageCb={this.addMessage} />\n//         <MessageList messages={this.state.messages} />\n//       </div>\n//     )\n//   }\n// }\n\nmodule.exports = MessageBoard\nexport default CenterBody;\n"]},"metadata":{},"sourceType":"module"}